{"ast":null,"code":"import { Interval } from '../interval';\nimport rmath from '../round';\nimport constants from '../constants';\nimport * as utils from './utils';\nimport * as division from './division';\n/**\n * @mixin arithmetic\n */\n/**\n * Adds two intervals\n *\n * @example\n * ```typescript\n * Interval.add(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(1), next(3))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function add(x, y) {\n  return new Interval(rmath.addLo(x.lo, y.lo), rmath.addHi(x.hi, y.hi));\n}\n/**\n * Subtracts two intervals\n *\n * @example\n * ```typescript\n * Interval.subtract(\n *   Interval(0, 1),\n *   Interval(1, 2),\n * )   // Interval(prev(-2), next(0))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function subtract(x, y) {\n  return new Interval(rmath.subLo(x.lo, y.hi), rmath.subHi(x.hi, y.lo));\n}\n/**\n * Alias for {@link subtract}\n * @function\n */\nexport const sub = subtract;\n/**\n * Multiplies two intervals, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(2, 3)\n * ) // Interval(prev(2), next(6))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, Infinity),\n *  Interval(4, 6)\n * ) // Interval(prev(4), Infinity)\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-3, -2)\n * ) // Interval(prev(-6), next(-2))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(1, 2),\n *  Interval(-2, 3)\n * ) // Interval(prev(-4), next(6))\n * ```\n *\n * @example\n * ```typescript\n * Interval.multiply(\n *  Interval(-2, -1),\n *  Interval(-3, -2)\n * ) // Interval(prev(2), next(6))\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function multiply(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n  const xl = x.lo;\n  const xh = x.hi;\n  const yl = y.lo;\n  const yh = y.hi;\n  const out = new Interval();\n  if (xl < 0) {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // mixed * mixed\n          out.lo = Math.min(rmath.mulLo(xl, yh), rmath.mulLo(xh, yl));\n          out.hi = Math.max(rmath.mulHi(xl, yl), rmath.mulHi(xh, yh));\n        } else {\n          // mixed * negative\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xl, yl);\n        }\n      } else {\n        if (yh > 0) {\n          // mixed * positive\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // mixed * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    } else {\n      if (yl < 0) {\n        if (yh > 0) {\n          // negative * mixed\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xl, yl);\n        } else {\n          // negative * negative\n          out.lo = rmath.mulLo(xh, yh);\n          out.hi = rmath.mulHi(xl, yl);\n        }\n      } else {\n        if (yh > 0) {\n          // negative * positive\n          out.lo = rmath.mulLo(xl, yh);\n          out.hi = rmath.mulHi(xh, yl);\n        } else {\n          // negative * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    }\n  } else {\n    if (xh > 0) {\n      if (yl < 0) {\n        if (yh > 0) {\n          // positive * mixed\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // positive * negative\n          out.lo = rmath.mulLo(xh, yl);\n          out.hi = rmath.mulHi(xl, yh);\n        }\n      } else {\n        if (yh > 0) {\n          // positive * positive\n          out.lo = rmath.mulLo(xl, yl);\n          out.hi = rmath.mulHi(xh, yh);\n        } else {\n          // positive * zero\n          out.lo = 0;\n          out.hi = 0;\n        }\n      }\n    } else {\n      // zero * any other value\n      out.lo = 0;\n      out.hi = 0;\n    }\n  }\n  return out;\n}\n/**\n * Alias for {@link multiply}\n * @function\n */\nexport const mul = multiply;\n/**\n * Computes x/y, an explanation of all the possible cases ca\n * be found on [Interval Arithmetic: from Principles to Implementation - T. Hickey, Q. Ju, M.H. van Emden](http://fab.cba.mit.edu/classes/S62.12/docs/Hickey_interval.pdf)\n *\n * NOTE: an extreme case of division might results in multiple\n * intervals, unfortunately this library doesn't support multi-interval\n * arithmetic yet so a single interval will be returned instead with\n * the {@link hull} of the resulting intervals (this is the way\n * Boost implements it too)\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(3, 4)\n * ) // Interval(prev(1/4), next(2/3))\n * ```\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(-2, 1),\n *   Interval(-4, -3)\n * ) // Interval(prev(-1/3), next(2/3))\n * ```\n *\n * @example\n * ```typescript\n * Interval.divide(\n *   Interval(1, 2),\n *   Interval(-1, 1)\n * ) // Interval(-Infinity, Infinity)\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function divide(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n  if (utils.zeroIn(y)) {\n    if (y.lo !== 0) {\n      if (y.hi !== 0) {\n        return division.zero(x);\n      } else {\n        return division.negative(x, y.lo);\n      }\n    } else {\n      if (y.hi !== 0) {\n        return division.positive(x, y.hi);\n      } else {\n        return constants.EMPTY;\n      }\n    }\n  } else {\n    return division.nonZero(x, y);\n  }\n}\n/**\n * Alias for {@link divide}\n * @function\n */\nexport const div = divide;\n/**\n * Computes +x (identity function)\n * @link clone\n *\n * @example\n * ```typescript\n * Interval.positive(\n *  Interval(1, 2)\n * )  // Interval(1, 2)\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function positive(x) {\n  return new Interval(x.lo, x.hi);\n}\n/**\n * Computes -x\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval(1, 2)\n * )  // Interval(-2, -1)\n * ```\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval(-Infinity, Infinity)\n * )  // Interval(-Infinity, Infinity)\n * ```\n *\n * @example\n * ```typescript\n * Interval.negative(\n *   Interval.WHOLE\n * )  // Interval.WHOLE\n * ```\n *\n * @param {Interval} x\n * @return {Interval}\n */\nexport function negative(x) {\n  return new Interval(-x.hi, -x.lo);\n}","map":{"version":3,"names":["Interval","rmath","constants","utils","division","add","x","y","addLo","lo","addHi","hi","subtract","subLo","subHi","sub","multiply","isEmpty","EMPTY","xl","xh","yl","yh","out","Math","min","mulLo","max","mulHi","mul","divide","zeroIn","zero","negative","positive","nonZero","div"],"sources":["../../src/operations/arithmetic.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}