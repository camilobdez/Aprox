{"ast":null,"code":"import { Interval } from '../interval';\nimport rmath from '../round';\nimport constants from '../constants';\nimport * as utils from './utils';\nimport * as arithmetic from './arithmetic';\n/**\n * @mixin algebra\n */\n/**\n * Computes `x mod y (x - k * y)`\n *\n * @example\n * ```typescript\n * Interval.fmod(\n *   Interval(5.3, 5.3),\n *   Interval(2, 2)\n * ) // Interval(1.3, 1.3)\n * Interval.fmod(\n *   Interval(5, 7),\n *   Interval(2, 3)\n * ) // Interval(2, 5)\n * // explanation: [5, 7] - [2, 3] * 1 = [2, 5]\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @return {Interval}\n */\nexport function fmod(x, y) {\n  if (utils.isEmpty(x) || utils.isEmpty(y)) {\n    return constants.EMPTY;\n  }\n  const yb = x.lo < 0 ? y.lo : y.hi;\n  let n = x.lo / yb;\n  if (n < 0) n = Math.ceil(n);else n = Math.floor(n);\n  // x mod y = x - n * y\n  return arithmetic.sub(x, arithmetic.mul(y, new Interval(n)));\n}\n/**\n * Computes `1 / x`\n *\n * @example\n * ```typescript\n * Interval.multiplicativeInverse(\n *   Interval(2, 6)\n * )  // Interval(1/6, 1/2)\n * Interval.multiplicativeInverse(\n *   Interval(-6, -2)\n * )  // Interval(-1/2, -1/6)\n * ```\n *\n * @param {Interval} x\n * @returns {Interval}\n */\nexport function multiplicativeInverse(x) {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY;\n  }\n  if (utils.zeroIn(x)) {\n    if (x.lo !== 0) {\n      if (x.hi !== 0) {\n        // [negative, positive]\n        return constants.WHOLE;\n      } else {\n        // [negative, zero]\n        return new Interval(Number.NEGATIVE_INFINITY, rmath.divHi(1, x.lo));\n      }\n    } else {\n      if (x.hi !== 0) {\n        // [zero, positive]\n        return new Interval(rmath.divLo(1, x.hi), Number.POSITIVE_INFINITY);\n      } else {\n        // [zero, zero]\n        return constants.EMPTY;\n      }\n    }\n  } else {\n    // [positive, positive]\n    return new Interval(rmath.divLo(1, x.hi), rmath.divHi(1, x.lo));\n  }\n}\n/**\n * Computes `x^power` given that `power` is an integer\n *\n * If `power` is an Interval it must be a singletonInterval i.e. `x^x` is not\n * supported yet\n *\n * If `power` is a rational number use {@link nthRoot} instead\n *\n * @example\n * ```typescript\n * // 2^{-2}\n * Interval.pow(\n *   Interval(2, 2),\n *   -2\n * )  // Interval(1/4, 1/4)\n * // [2,3]^2\n * Interval.pow(\n *   Interval(2, 3),\n *   2\n * )  // Interval(4, 9)\n * // [2,3]^0\n * Interval.pow(\n *   Interval(2, 3),\n *   0\n * )  // Interval(1, 1)\n * // with a singleton interval\n * Interval.pow(\n *   Interval(2, 3),\n *   Interval(2)\n * )  // Interval(4, 9)\n * ```\n *\n * @param {Interval} x\n * @param {number|Interval} power A number of a singleton interval\n * @returns {Interval}\n */\nexport function pow(x, power) {\n  if (utils.isEmpty(x)) {\n    return constants.EMPTY;\n  }\n  if (typeof power === 'object') {\n    if (!utils.isSingleton(power)) {\n      return constants.EMPTY;\n    }\n    power = power.lo;\n  }\n  if (power === 0) {\n    if (x.lo === 0 && x.hi === 0) {\n      // 0^0\n      return constants.EMPTY;\n    } else {\n      // x^0\n      return constants.ONE;\n    }\n  } else if (power < 0) {\n    // compute [1 / x]^-power if power is negative\n    return pow(multiplicativeInverse(x), -power);\n  }\n  // power > 0\n  if (Number.isSafeInteger(power)) {\n    // power is integer\n    if (x.hi < 0) {\n      // [negative, negative]\n      // assume that power is even so the operation will yield a positive interval\n      // if not then just switch the sign and order of the interval bounds\n      const yl = rmath.powLo(-x.hi, power);\n      const yh = rmath.powHi(-x.lo, power);\n      if ((power & 1) === 1) {\n        // odd power\n        return new Interval(-yh, -yl);\n      } else {\n        // even power\n        return new Interval(yl, yh);\n      }\n    } else if (x.lo < 0) {\n      // [negative, positive]\n      if ((power & 1) === 1) {\n        return new Interval(-rmath.powLo(-x.lo, power), rmath.powHi(x.hi, power));\n      } else {\n        // even power means that any negative number will be zero (min value = 0)\n        // and the max value will be the max of x.lo^power, x.hi^power\n        return new Interval(0, rmath.powHi(Math.max(-x.lo, x.hi), power));\n      }\n    } else {\n      // [positive, positive]\n      return new Interval(rmath.powLo(x.lo, power), rmath.powHi(x.hi, power));\n    }\n  } else {\n    console.warn('power is not an integer, you should use nth-root instead, returning an empty interval');\n    return constants.EMPTY;\n  }\n}\n/**\n * Computes `sqrt(x)`, alias for `nthRoot(x, 2)`\n *\n * @example\n * ```typescript\n * Interval.sqrt(\n *   Interval(4, 9)\n * ) // Interval(prev(2), next(3))\n * ```\n *\n * @param {Interval} x\n * @returns {Interval}\n */\nexport function sqrt(x) {\n  return nthRoot(x, 2);\n}\n/**\n * Computes `x^(1/n)`\n *\n * @example\n * ```typescript\n * Interval.nthRoot(\n *   Interval(-27, -8),\n *   3\n * ) // Interval(-3, -2)\n * ```\n *\n * @param {Interval} x\n * @param {number|Interval} n A number or a singleton interval\n * @return {Interval}\n */\nexport function nthRoot(x, n) {\n  if (utils.isEmpty(x) || n < 0) {\n    // compute 1 / x^-power if power is negative\n    return constants.EMPTY;\n  }\n  // singleton interval check\n  if (typeof n === 'object') {\n    if (!utils.isSingleton(n)) {\n      return constants.EMPTY;\n    }\n    n = n.lo;\n  }\n  const power = 1 / n;\n  if (x.hi < 0) {\n    // [negative, negative]\n    if (Number.isSafeInteger(n) && (n & 1) === 1) {\n      // when n is odd we can always take the nth root\n      const yl = rmath.powHi(-x.lo, power);\n      const yh = rmath.powLo(-x.hi, power);\n      return new Interval(-yl, -yh);\n    }\n    // n is not odd therefore there's no nth root\n    return constants.EMPTY;\n  } else if (x.lo < 0) {\n    // [negative, positive]\n    const yp = rmath.powHi(x.hi, power);\n    if (Number.isSafeInteger(n) && (n & 1) === 1) {\n      // nth root of x.lo is possible (n is odd)\n      const yn = -rmath.powHi(-x.lo, power);\n      return new Interval(yn, yp);\n    }\n    return new Interval(0, yp);\n  } else {\n    // [positive, positive]\n    return new Interval(rmath.powLo(x.lo, power), rmath.powHi(x.hi, power));\n  }\n}","map":{"version":3,"names":["Interval","rmath","constants","utils","arithmetic","fmod","x","y","isEmpty","EMPTY","yb","lo","hi","n","Math","ceil","floor","sub","mul","multiplicativeInverse","zeroIn","WHOLE","Number","NEGATIVE_INFINITY","divHi","divLo","POSITIVE_INFINITY","pow","power","isSingleton","ONE","isSafeInteger","yl","powLo","yh","powHi","max","console","warn","sqrt","nthRoot","yp","yn"],"sources":["../../src/operations/algebra.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}