{"ast":null,"code":"import { Interval } from './interval';\nimport round from './round';\nconst piLow = (3373259426.0 + 273688.0 / (1 << 21)) / (1 << 30);\nconst piHigh = (3373259426.0 + 273689.0 / (1 << 21)) / (1 << 30);\n/**\n * @mixin constants\n */\nconst constants = {\n  /**\n   * Previous IEEE floating point value of PI (equal to Math.PI)\n   * 3.141592653589793\n   * @memberof constants\n   * @type {number}\n   */\n  PI_LOW: piLow,\n  /**\n   * Next IEEE floating point value of PI, 3.1415926535897936\n   * @memberof constants\n   * @type {number}\n   */\n  PI_HIGH: piHigh,\n  PI_HALF_LOW: piLow / 2,\n  PI_HALF_HIGH: piHigh / 2,\n  PI_TWICE_LOW: piLow * 2,\n  PI_TWICE_HIGH: piHigh * 2,\n  /**\n   * An interval that represents PI, NOTE: calls to Interval.PI always return\n   * a new interval representing PI\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval.E\n   * ```\n   * @name E\n   * @type {Interval}\n   */\n  get E() {\n    return new Interval(round.prev(Math.E), round.next(Math.E));\n  },\n  /**\n   * An interval that represents Euler's constant e, NOTE: calls to Interval.E always return\n   * a new interval representing PI\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval(Interval.PI_LOW, Interval.PI_HIGH)\n   * ```\n   * @name PI\n   * @type {Interval}\n   */\n  get PI() {\n    return new Interval(piLow, piHigh);\n  },\n  /**\n   * An interval that represents `PI / 2`, NOTE: calls to `Interval.PI_HALF` always\n   * return a new interval representing `PI / 2`\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval(Interval.PI_LOW / 2, Interval.PI_HIGH / 2)\n   * ```\n   * @name PI_HALF\n   * @type {Interval}\n   */\n  get PI_HALF() {\n    return new Interval(constants.PI_HALF_LOW, constants.PI_HALF_HIGH);\n  },\n  /**\n   * An interval that represents `PI * 2` NOTE: calls to `Interval.PI_TWICE` always\n   * return a new interval representing `PI * 2`\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * Interval(Interval.PI_LOW * 2, Interval.PI_HIGH * 2)\n   * ```\n   * @name PI_TWICE\n   * @type {Interval}\n   */\n  get PI_TWICE() {\n    return new Interval(constants.PI_TWICE_LOW, constants.PI_TWICE_HIGH);\n  },\n  /**\n   * An interval that represents 0, NOTE: calls to `Interval.ZERO` always return a new interval representing 0\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * // Interval.ZERO is equivalent to\n   * Interval(0)\n   * ```\n   * @name ZERO\n   * @type {Interval}\n   */\n  get ZERO() {\n    return new Interval(0);\n  },\n  /**\n   * An interval that represents 1, NOTE: calls to Interval.ONE always\n   * return a new interval representing 1\n   * @memberof constants\n   * @static\n   * @example\n   * // Interval.ONE is equivalent to\n   * Interval(1)\n   * @name ONE\n   * @type {Interval}\n   */\n  get ONE() {\n    return new Interval(1);\n  },\n  /**\n   * An interval that represents all the real values\n   * NOTE: calls to Interval.WHOLE always return a new interval representing all the real values\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * // Interval.WHOLE is equivalent to\n   * Interval().setWhole()\n   * ```\n   * @name WHOLE\n   * @type {Interval}\n   */\n  get WHOLE() {\n    return new Interval().setWhole();\n  },\n  /**\n   * An interval that represents no values\n   * NOTE: calls to Interval.EMPTY always return a new interval representing no values\n   * @memberof constants\n   * @static\n   * @example\n   * ```typescript\n   * // Interval.EMPTY is equivalent to\n   * Interval().setEmpty()\n   * ```\n   * @name EMPTY\n   * @type {Interval}\n   */\n  get EMPTY() {\n    return new Interval().setEmpty();\n  }\n};\nexport default constants;","map":{"version":3,"names":["Interval","round","piLow","piHigh","constants","PI_LOW","PI_HIGH","PI_HALF_LOW","PI_HALF_HIGH","PI_TWICE_LOW","PI_TWICE_HIGH","E","prev","Math","next","PI","PI_HALF","PI_TWICE","ZERO","ONE","WHOLE","setWhole","EMPTY","setEmpty"],"sources":["../src/constants.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,KAAK,GAAG,CAAC,YAAY,GAAG,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAC/D,MAAMC,MAAM,GAAG,CAAC,YAAY,GAAG,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AAEhE;;;AAGA,MAAMC,SAAS,GAAG;EAChB;;;;;;EAMAC,MAAM,EAAEH,KAAK;EACb;;;;;EAKAI,OAAO,EAAEH,MAAM;EACfI,WAAW,EAAEL,KAAK,GAAG,CAAC;EACtBM,YAAY,EAAEL,MAAM,GAAG,CAAC;EACxBM,YAAY,EAAEP,KAAK,GAAG,CAAC;EACvBQ,aAAa,EAAEP,MAAM,GAAG,CAAC;EAEzB;;;;;;;;;;;;EAYA,IAAIQ,CAACA,CAAA;IACH,OAAO,IAAIX,QAAQ,CACjBC,KAAK,CAACW,IAAI,CAACC,IAAI,CAACF,CAAC,CAAC,EAClBV,KAAK,CAACa,IAAI,CAACD,IAAI,CAACF,CAAC,CAAC,CACnB;EACH,CAAC;EAED;;;;;;;;;;;;EAYA,IAAII,EAAEA,CAAA;IACJ,OAAO,IAAIf,QAAQ,CAACE,KAAK,EAAEC,MAAM,CAAC;EACpC,CAAC;EAED;;;;;;;;;;;;EAYA,IAAIa,OAAOA,CAAA;IACT,OAAO,IAAIhB,QAAQ,CAACI,SAAS,CAACG,WAAW,EAAEH,SAAS,CAACI,YAAY,CAAC;EACpE,CAAC;EAED;;;;;;;;;;;;EAYA,IAAIS,QAAQA,CAAA;IACV,OAAO,IAAIjB,QAAQ,CAACI,SAAS,CAACK,YAAY,EAAEL,SAAS,CAACM,aAAa,CAAC;EACtE,CAAC;EAED;;;;;;;;;;;;EAYA,IAAIQ,IAAIA,CAAA;IACN,OAAO,IAAIlB,QAAQ,CAAC,CAAC,CAAC;EACxB,CAAC;EAED;;;;;;;;;;;EAWA,IAAImB,GAAGA,CAAA;IACL,OAAO,IAAInB,QAAQ,CAAC,CAAC,CAAC;EACxB,CAAC;EAED;;;;;;;;;;;;;EAaA,IAAIoB,KAAKA,CAAA;IACP,OAAO,IAAIpB,QAAQ,EAAE,CAACqB,QAAQ,EAAE;EAClC,CAAC;EAED;;;;;;;;;;;;;EAaA,IAAIC,KAAKA,CAAA;IACP,OAAO,IAAItB,QAAQ,EAAE,CAACuB,QAAQ,EAAE;EAClC;CACD;AAED,eAAenB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}