{"ast":null,"code":"var tokenType = require('./token-type');\nvar Lexer = require('./Lexer');\nvar ConstantNode = require('./node/ConstantNode');\nvar OperatorNode = require('./node/OperatorNode');\nvar UnaryNode = require('./node/UnaryNode');\nvar SymbolNode = require('./node/SymbolNode');\nvar FunctionNode = require('./node/FunctionNode');\nvar ArrayNode = require('./node/ArrayNode');\nvar ConditionalNode = require('./node/ConditionalNode');\nvar AssignmentNode = require('./node/AssignmentNode');\nvar BlockNode = require('./node/BlockNode');\n\n/**\n * Grammar DSL:\n *\n * program          : block (; block)*\n *\n * block            : assignment\n *\n * assignment       : ternary\n *                  | symbol `=` assignment\n *\n * ternary          : logicalOR\n *                  | logicalOR `?` ternary `:` ternary\n *\n * logicalOR        : logicalXOR\n *                  | logicalXOR (`||`,`or`) logicalOR\n *\n * logicalXOR       : logicalAND\n *                  : logicalAND `xor` logicalXOR\n *\n * logicalAND       : bitwiseOR\n *                  | bitwiseOR (`&&`,`and`) logicalAND\n *\n * bitwiseOR        : bitwiseXOR\n *                  | bitwiseXOR `|` bitwiseOR\n *\n * bitwiseXOR       : bitwiseAND\n *                  | bitwiseAND `^|` bitwiseXOR\n *\n * bitwiseAND       : relational\n *                  | relational `&` bitwiseAND\n *\n * relational       : shift\n *                  | shift (`!=` | `==` | `>` | '<' | '<=' |'>=') shift)\n *\n * shift            : additive\n *                  | additive (`>>` | `<<` | `>>>`) shift\n *\n * additive         : multiplicative\n *                  | multiplicative (`+` | `-`) additive\n *\n * multiplicative   : unary\n *                  | unary (`*` | `/` | `%`) unary\n *                  | unary symbol\n *\n * unary            : pow\n *                  | (`-` | `+` | `~`) unary\n *\n * pow              : factorial\n *                  | factorial (`^`, '**') unary\n *\n * factorial        : symbol\n *                  | symbol (`!`)\n *\n * symbol           : symbolToken\n *                  | symbolToken functionCall\n *                  | string\n *\n * functionCall     : `(` `)`\n *                  | `(` ternary (, ternary)* `)`\n *\n * string           : `'` (character)* `'`\n *                  : `\"` (character)* `\"`\n *                  | array\n *\n * array            : `[` `]`\n *                  | `[` assignment (, assignment)* `]`\n *                  | number\n *\n * number           : number-token\n *                  | parentheses\n *\n * parentheses      : `(` assignment `)`\n *                  : end\n *\n * end              : NULL\n *\n * @param {[type]} lexer [description]\n */\nfunction Parser() {\n  this.lexer = new Lexer();\n  this.tokens = null;\n}\nParser.prototype.current = function () {\n  return this.tokens[0];\n};\nParser.prototype.next = function () {\n  return this.tokens[1];\n};\nParser.prototype.peek = function () {\n  if (this.tokens.length) {\n    var first = this.tokens[0];\n    for (var i = 0; i < arguments.length; i += 1) {\n      if (first.value === arguments[i]) {\n        return true;\n      }\n    }\n  }\n};\nParser.prototype.consume = function (e) {\n  return this.tokens.shift();\n};\nParser.prototype.expect = function (e) {\n  if (!this.peek(e)) {\n    throw Error('expected ' + e);\n  }\n  return this.consume();\n};\nParser.prototype.isEOF = function () {\n  return this.current().type === tokenType.EOF;\n};\nParser.prototype.parse = function (text) {\n  this.tokens = this.lexer.lex(text);\n  return this.program();\n};\nParser.prototype.program = function () {\n  var blocks = [];\n  while (!this.isEOF()) {\n    blocks.push(this.assignment());\n    if (this.peek(';')) {\n      this.consume();\n    }\n  }\n  this.end();\n  return new BlockNode(blocks);\n};\nParser.prototype.assignment = function () {\n  var left = this.ternary();\n  if (left instanceof SymbolNode && this.peek('=')) {\n    this.consume();\n    return new AssignmentNode(left.name, this.assignment());\n  }\n  return left;\n};\nParser.prototype.ternary = function () {\n  var predicate = this.logicalOR();\n  if (this.peek('?')) {\n    this.consume();\n    var truthy = this.ternary();\n    this.expect(':');\n    var falsy = this.ternary();\n    return new ConditionalNode(predicate, truthy, falsy);\n  }\n  return predicate;\n};\nParser.prototype.logicalOR = function () {\n  var left = this.logicalXOR();\n  if (this.peek('||')) {\n    var op = this.consume();\n    var right = this.logicalOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.logicalXOR = function () {\n  var left = this.logicalAND();\n  if (this.current().value === 'xor') {\n    var op = this.consume();\n    var right = this.logicalXOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.logicalAND = function () {\n  var left = this.bitwiseOR();\n  if (this.peek('&&')) {\n    var op = this.consume();\n    var right = this.logicalAND();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.bitwiseOR = function () {\n  var left = this.bitwiseXOR();\n  if (this.peek('|')) {\n    var op = this.consume();\n    var right = this.bitwiseOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.bitwiseXOR = function () {\n  var left = this.bitwiseAND();\n  if (this.peek('^|')) {\n    var op = this.consume();\n    var right = this.bitwiseXOR();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.bitwiseAND = function () {\n  var left = this.relational();\n  if (this.peek('&')) {\n    var op = this.consume();\n    var right = this.bitwiseAND();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.relational = function () {\n  var left = this.shift();\n  if (this.peek('==', '===', '!=', '!==', '>=', '<=', '>', '<')) {\n    var op = this.consume();\n    var right = this.shift();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.shift = function () {\n  var left = this.additive();\n  if (this.peek('>>', '<<', '>>>')) {\n    var op = this.consume();\n    var right = this.shift();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.additive = function () {\n  var left = this.multiplicative();\n  while (this.peek('+', '-')) {\n    var op = this.consume();\n    left = new OperatorNode(op.value, [left, this.multiplicative()]);\n  }\n  return left;\n};\nParser.prototype.multiplicative = function () {\n  var op, right;\n  var left = this.unary();\n  while (this.peek('*', '/', '%')) {\n    op = this.consume();\n    left = new OperatorNode(op.value, [left, this.unary()]);\n  }\n\n  // implicit multiplication\n  // - 2 x\n  // - 2(x)\n  // - (2)2\n  if (this.current().type === tokenType.SYMBOL || this.peek('(') || !(left.type instanceof ConstantNode) && this.current().type === tokenType.NUMBER) {\n    right = this.multiplicative();\n    return new OperatorNode('*', [left, right]);\n  }\n  return left;\n};\nParser.prototype.unary = function () {\n  if (this.peek('-', '+', '~')) {\n    var op = this.consume();\n    var right = this.unary();\n    return new UnaryNode(op.value, right);\n  }\n  return this.pow();\n};\nParser.prototype.pow = function () {\n  var left = this.factorial();\n  if (this.peek('^', '**')) {\n    var op = this.consume();\n    var right = this.unary();\n    return new OperatorNode(op.value, [left, right]);\n  }\n  return left;\n};\nParser.prototype.factorial = function () {\n  var left = this.symbol();\n  if (this.peek('!')) {\n    var op = this.consume();\n    return new OperatorNode(op.value, [left]);\n  }\n  return left;\n};\nParser.prototype.symbol = function () {\n  var current = this.current();\n  if (current.type === tokenType.SYMBOL) {\n    var symbol = this.consume();\n    var node = this.functionCall(symbol);\n    return node;\n  }\n  return this.string();\n};\nParser.prototype.functionCall = function (symbolToken) {\n  var name = symbolToken.value;\n  if (this.peek('(')) {\n    this.consume();\n    var params = [];\n    while (!this.peek(')') && !this.isEOF()) {\n      params.push(this.assignment());\n      if (this.peek(',')) {\n        this.consume();\n      }\n    }\n    this.expect(')');\n    return new FunctionNode(name, params);\n  }\n  return new SymbolNode(name);\n};\nParser.prototype.string = function () {\n  if (this.current().type === tokenType.STRING) {\n    return new ConstantNode(this.consume().value, 'string');\n  }\n  return this.array();\n};\nParser.prototype.array = function () {\n  if (this.peek('[')) {\n    this.consume();\n    var params = [];\n    while (!this.peek(']') && !this.isEOF()) {\n      params.push(this.assignment());\n      if (this.peek(',')) {\n        this.consume();\n      }\n    }\n    this.expect(']');\n    return new ArrayNode(params);\n  }\n  return this.number();\n};\nParser.prototype.number = function () {\n  var token = this.current();\n  if (token.type === tokenType.NUMBER) {\n    return new ConstantNode(this.consume().value, 'number');\n  }\n  return this.parentheses();\n};\nParser.prototype.parentheses = function () {\n  var token = this.current();\n  if (token.value === '(') {\n    this.consume();\n    var left = this.assignment();\n    this.expect(')');\n    return left;\n  }\n  return this.end();\n};\nParser.prototype.end = function () {\n  var token = this.current();\n  if (token.type !== tokenType.EOF) {\n    throw Error('unexpected end of expression');\n  }\n};\nmodule.exports = Parser;","map":{"version":3,"names":["tokenType","require","Lexer","ConstantNode","OperatorNode","UnaryNode","SymbolNode","FunctionNode","ArrayNode","ConditionalNode","AssignmentNode","BlockNode","Parser","lexer","tokens","prototype","current","next","peek","length","first","i","arguments","value","consume","e","shift","expect","Error","isEOF","type","EOF","parse","text","lex","program","blocks","push","assignment","end","left","ternary","name","predicate","logicalOR","truthy","falsy","logicalXOR","op","right","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","relational","additive","multiplicative","unary","SYMBOL","NUMBER","pow","factorial","symbol","node","functionCall","string","symbolToken","params","STRING","array","number","token","parentheses","module","exports"],"sources":["C:/Users/camilo/Desktop/aprox/node_modules/mr-parser/lib/Parser.js"],"sourcesContent":["var tokenType = require('./token-type')\n\nvar Lexer = require('./Lexer')\nvar ConstantNode = require('./node/ConstantNode')\nvar OperatorNode = require('./node/OperatorNode')\nvar UnaryNode = require('./node/UnaryNode')\nvar SymbolNode = require('./node/SymbolNode')\nvar FunctionNode = require('./node/FunctionNode')\nvar ArrayNode = require('./node/ArrayNode')\nvar ConditionalNode = require('./node/ConditionalNode')\nvar AssignmentNode = require('./node/AssignmentNode')\nvar BlockNode = require('./node/BlockNode')\n\n/**\n * Grammar DSL:\n *\n * program          : block (; block)*\n *\n * block            : assignment\n *\n * assignment       : ternary\n *                  | symbol `=` assignment\n *\n * ternary          : logicalOR\n *                  | logicalOR `?` ternary `:` ternary\n *\n * logicalOR        : logicalXOR\n *                  | logicalXOR (`||`,`or`) logicalOR\n *\n * logicalXOR       : logicalAND\n *                  : logicalAND `xor` logicalXOR\n *\n * logicalAND       : bitwiseOR\n *                  | bitwiseOR (`&&`,`and`) logicalAND\n *\n * bitwiseOR        : bitwiseXOR\n *                  | bitwiseXOR `|` bitwiseOR\n *\n * bitwiseXOR       : bitwiseAND\n *                  | bitwiseAND `^|` bitwiseXOR\n *\n * bitwiseAND       : relational\n *                  | relational `&` bitwiseAND\n *\n * relational       : shift\n *                  | shift (`!=` | `==` | `>` | '<' | '<=' |'>=') shift)\n *\n * shift            : additive\n *                  | additive (`>>` | `<<` | `>>>`) shift\n *\n * additive         : multiplicative\n *                  | multiplicative (`+` | `-`) additive\n *\n * multiplicative   : unary\n *                  | unary (`*` | `/` | `%`) unary\n *                  | unary symbol\n *\n * unary            : pow\n *                  | (`-` | `+` | `~`) unary\n *\n * pow              : factorial\n *                  | factorial (`^`, '**') unary\n *\n * factorial        : symbol\n *                  | symbol (`!`)\n *\n * symbol           : symbolToken\n *                  | symbolToken functionCall\n *                  | string\n *\n * functionCall     : `(` `)`\n *                  | `(` ternary (, ternary)* `)`\n *\n * string           : `'` (character)* `'`\n *                  : `\"` (character)* `\"`\n *                  | array\n *\n * array            : `[` `]`\n *                  | `[` assignment (, assignment)* `]`\n *                  | number\n *\n * number           : number-token\n *                  | parentheses\n *\n * parentheses      : `(` assignment `)`\n *                  : end\n *\n * end              : NULL\n *\n * @param {[type]} lexer [description]\n */\nfunction Parser () {\n  this.lexer = new Lexer()\n  this.tokens = null\n}\n\nParser.prototype.current = function () {\n  return this.tokens[0]\n}\n\nParser.prototype.next = function () {\n  return this.tokens[1]\n}\n\nParser.prototype.peek = function () {\n  if (this.tokens.length) {\n    var first = this.tokens[0]\n    for (var i = 0; i < arguments.length; i += 1) {\n      if (first.value === arguments[i]) {\n        return true\n      }\n    }\n  }\n}\n\nParser.prototype.consume = function (e) {\n  return this.tokens.shift()\n}\n\nParser.prototype.expect = function (e) {\n  if (!this.peek(e)) {\n    throw Error('expected ' + e)\n  }\n  return this.consume()\n}\n\nParser.prototype.isEOF = function () {\n  return this.current().type === tokenType.EOF\n}\n\nParser.prototype.parse = function (text) {\n  this.tokens = this.lexer.lex(text)\n  return this.program()\n}\n\nParser.prototype.program = function () {\n  var blocks = []\n  while (!this.isEOF()) {\n    blocks.push(this.assignment())\n    if (this.peek(';')) {\n      this.consume()\n    }\n  }\n  this.end()\n  return new BlockNode(blocks)\n}\n\nParser.prototype.assignment = function () {\n  var left = this.ternary()\n  if (left instanceof SymbolNode && this.peek('=')) {\n    this.consume()\n    return new AssignmentNode(left.name, this.assignment())\n  }\n  return left\n}\n\nParser.prototype.ternary = function () {\n  var predicate = this.logicalOR()\n  if (this.peek('?')) {\n    this.consume()\n    var truthy = this.ternary()\n    this.expect(':')\n    var falsy = this.ternary()\n    return new ConditionalNode(predicate, truthy, falsy)\n  }\n  return predicate\n}\n\nParser.prototype.logicalOR = function () {\n  var left = this.logicalXOR()\n  if (this.peek('||')) {\n    var op = this.consume()\n    var right = this.logicalOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.logicalXOR = function () {\n  var left = this.logicalAND()\n  if (this.current().value === 'xor') {\n    var op = this.consume()\n    var right = this.logicalXOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.logicalAND = function () {\n  var left = this.bitwiseOR()\n  if (this.peek('&&')) {\n    var op = this.consume()\n    var right = this.logicalAND()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.bitwiseOR = function () {\n  var left = this.bitwiseXOR()\n  if (this.peek('|')) {\n    var op = this.consume()\n    var right = this.bitwiseOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.bitwiseXOR = function () {\n  var left = this.bitwiseAND()\n  if (this.peek('^|')) {\n    var op = this.consume()\n    var right = this.bitwiseXOR()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.bitwiseAND = function () {\n  var left = this.relational()\n  if (this.peek('&')) {\n    var op = this.consume()\n    var right = this.bitwiseAND()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.relational = function () {\n  var left = this.shift()\n  if (this.peek('==', '===', '!=', '!==', '>=', '<=', '>', '<')) {\n    var op = this.consume()\n    var right = this.shift()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.shift = function () {\n  var left = this.additive()\n  if (this.peek('>>', '<<', '>>>')) {\n    var op = this.consume()\n    var right = this.shift()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.additive = function () {\n  var left = this.multiplicative()\n  while (this.peek('+', '-')) {\n    var op = this.consume()\n    left = new OperatorNode(op.value, [left, this.multiplicative()])\n  }\n  return left\n}\n\nParser.prototype.multiplicative = function () {\n  var op, right\n  var left = this.unary()\n  while (this.peek('*', '/', '%')) {\n    op = this.consume()\n    left = new OperatorNode(op.value, [left, this.unary()])\n  }\n\n  // implicit multiplication\n  // - 2 x\n  // - 2(x)\n  // - (2)2\n  if (this.current().type === tokenType.SYMBOL ||\n      this.peek('(') ||\n      (!(left.type instanceof ConstantNode) && this.current().type === tokenType.NUMBER)\n      ) {\n    right = this.multiplicative()\n    return new OperatorNode('*', [left, right])\n  }\n\n  return left\n}\n\nParser.prototype.unary = function () {\n  if (this.peek('-', '+', '~')) {\n    var op = this.consume()\n    var right = this.unary()\n    return new UnaryNode(op.value, right)\n  }\n  return this.pow()\n}\n\nParser.prototype.pow = function () {\n  var left = this.factorial()\n  if (this.peek('^', '**')) {\n    var op = this.consume()\n    var right = this.unary()\n    return new OperatorNode(op.value, [left, right])\n  }\n  return left\n}\n\nParser.prototype.factorial = function () {\n  var left = this.symbol()\n  if (this.peek('!')) {\n    var op = this.consume()\n    return new OperatorNode(op.value, [left])\n  }\n  return left\n}\n\nParser.prototype.symbol = function () {\n  var current = this.current()\n  if (current.type === tokenType.SYMBOL) {\n    var symbol = this.consume()\n    var node = this.functionCall(symbol)\n    return node\n  }\n  return this.string()\n}\n\nParser.prototype.functionCall = function (symbolToken) {\n  var name = symbolToken.value\n  if (this.peek('(')) {\n    this.consume()\n    var params = []\n    while (!this.peek(')') && !this.isEOF()) {\n      params.push(this.assignment())\n      if (this.peek(',')) {\n        this.consume()\n      }\n    }\n    this.expect(')')\n    return new FunctionNode(name, params)\n  }\n  return new SymbolNode(name)\n}\n\nParser.prototype.string = function () {\n  if (this.current().type === tokenType.STRING) {\n    return new ConstantNode(this.consume().value, 'string')\n  }\n  return this.array()\n}\n\nParser.prototype.array = function () {\n  if (this.peek('[')) {\n    this.consume()\n    var params = []\n    while (!this.peek(']') && !this.isEOF()) {\n      params.push(this.assignment())\n      if (this.peek(',')) {\n        this.consume()\n      }\n    }\n    this.expect(']')\n    return new ArrayNode(params)\n  }\n  return this.number()\n}\n\nParser.prototype.number = function () {\n  var token = this.current()\n  if (token.type === tokenType.NUMBER) {\n    return new ConstantNode(this.consume().value, 'number')\n  }\n  return this.parentheses()\n}\n\nParser.prototype.parentheses = function () {\n  var token = this.current()\n  if (token.value === '(') {\n    this.consume()\n    var left = this.assignment()\n    this.expect(')')\n    return left\n  }\n  return this.end()\n}\n\nParser.prototype.end = function () {\n  var token = this.current()\n  if (token.type !== tokenType.EOF) {\n    throw Error('unexpected end of expression')\n  }\n}\n\nmodule.exports = Parser\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}