{"ast":null,"code":"'use strict';\n\nvar extend = require('extend');\nvar types = {\n  ArrayNode: require('./node/ArrayNode'),\n  AssignmentNode: require('./node/AssignmentNode'),\n  ConditionalNode: require('./node/ConditionalNode'),\n  ConstantNode: require('./node/ConstantNode'),\n  FunctionNode: require('./node/FunctionNode'),\n  OperatorNode: require('./node/OperatorNode'),\n  SymbolNode: require('./node/SymbolNode'),\n  UnaryNode: require('./node/UnaryNode')\n};\nvar Interpreter = function (owner, options) {\n  this.owner = owner;\n  this.options = extend({\n    factory: 'ns.factory',\n    raw: false,\n    rawArrayExpressionElements: true,\n    rawCallExpressionElements: false,\n    applyFactoryToScope: false\n  }, options);\n};\nextend(Interpreter.prototype, types);\n\n// main method which decides which expression to call\nInterpreter.prototype.next = function (node) {\n  if (!(node.type in this)) {\n    throw new TypeError('the node type ' + node.type + ' is not implemented');\n  }\n  return this[node.type](node);\n};\nInterpreter.prototype.rawify = function (test, fn) {\n  var oldRaw = this.options.raw;\n  if (test) {\n    this.options.raw = true;\n  }\n  fn();\n  if (test) {\n    this.options.raw = oldRaw;\n  }\n};\nmodule.exports = Interpreter;","map":{"version":3,"names":["extend","require","types","ArrayNode","AssignmentNode","ConditionalNode","ConstantNode","FunctionNode","OperatorNode","SymbolNode","UnaryNode","Interpreter","owner","options","factory","raw","rawArrayExpressionElements","rawCallExpressionElements","applyFactoryToScope","prototype","next","node","type","TypeError","rawify","test","fn","oldRaw","module","exports"],"sources":["C:/Users/camilo/Desktop/aprox/node_modules/interval-arithmetic-eval/node_modules/math-codegen/lib/Interpreter.js"],"sourcesContent":["'use strict'\nvar extend = require('extend')\n\nvar types = {\n  ArrayNode: require('./node/ArrayNode'),\n  AssignmentNode: require('./node/AssignmentNode'),\n  ConditionalNode: require('./node/ConditionalNode'),\n  ConstantNode: require('./node/ConstantNode'),\n  FunctionNode: require('./node/FunctionNode'),\n  OperatorNode: require('./node/OperatorNode'),\n  SymbolNode: require('./node/SymbolNode'),\n  UnaryNode: require('./node/UnaryNode')\n}\n\nvar Interpreter = function (owner, options) {\n  this.owner = owner\n  this.options = extend({\n    factory: 'ns.factory',\n    raw: false,\n    rawArrayExpressionElements: true,\n    rawCallExpressionElements: false,\n    applyFactoryToScope: false\n  }, options)\n}\n\nextend(Interpreter.prototype, types)\n\n// main method which decides which expression to call\nInterpreter.prototype.next = function (node) {\n  if (!(node.type in this)) {\n    throw new TypeError('the node type ' + node.type + ' is not implemented')\n  }\n  return this[node.type](node)\n}\n\nInterpreter.prototype.rawify = function (test, fn) {\n  var oldRaw = this.options.raw\n  if (test) {\n    this.options.raw = true\n  }\n  fn()\n  if (test) {\n    this.options.raw = oldRaw\n  }\n}\n\nmodule.exports = Interpreter\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9B,IAAIC,KAAK,GAAG;EACVC,SAAS,EAAEF,OAAO,CAAC,kBAAkB,CAAC;EACtCG,cAAc,EAAEH,OAAO,CAAC,uBAAuB,CAAC;EAChDI,eAAe,EAAEJ,OAAO,CAAC,wBAAwB,CAAC;EAClDK,YAAY,EAAEL,OAAO,CAAC,qBAAqB,CAAC;EAC5CM,YAAY,EAAEN,OAAO,CAAC,qBAAqB,CAAC;EAC5CO,YAAY,EAAEP,OAAO,CAAC,qBAAqB,CAAC;EAC5CQ,UAAU,EAAER,OAAO,CAAC,mBAAmB,CAAC;EACxCS,SAAS,EAAET,OAAO,CAAC,kBAAkB;AACvC,CAAC;AAED,IAAIU,WAAW,GAAG,SAAAA,CAAUC,KAAK,EAAEC,OAAO,EAAE;EAC1C,IAAI,CAACD,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,OAAO,GAAGb,MAAM,CAAC;IACpBc,OAAO,EAAE,YAAY;IACrBC,GAAG,EAAE,KAAK;IACVC,0BAA0B,EAAE,IAAI;IAChCC,yBAAyB,EAAE,KAAK;IAChCC,mBAAmB,EAAE;EACvB,CAAC,EAAEL,OAAO,CAAC;AACb,CAAC;AAEDb,MAAM,CAACW,WAAW,CAACQ,SAAS,EAAEjB,KAAK,CAAC;;AAEpC;AACAS,WAAW,CAACQ,SAAS,CAACC,IAAI,GAAG,UAAUC,IAAI,EAAE;EAC3C,IAAI,EAAEA,IAAI,CAACC,IAAI,IAAI,IAAI,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CAAC,gBAAgB,GAAGF,IAAI,CAACC,IAAI,GAAG,qBAAqB,CAAC;EAC3E;EACA,OAAO,IAAI,CAACD,IAAI,CAACC,IAAI,CAAC,CAACD,IAAI,CAAC;AAC9B,CAAC;AAEDV,WAAW,CAACQ,SAAS,CAACK,MAAM,GAAG,UAAUC,IAAI,EAAEC,EAAE,EAAE;EACjD,IAAIC,MAAM,GAAG,IAAI,CAACd,OAAO,CAACE,GAAG;EAC7B,IAAIU,IAAI,EAAE;IACR,IAAI,CAACZ,OAAO,CAACE,GAAG,GAAG,IAAI;EACzB;EACAW,EAAE,CAAC,CAAC;EACJ,IAAID,IAAI,EAAE;IACR,IAAI,CAACZ,OAAO,CAACE,GAAG,GAAGY,MAAM;EAC3B;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGlB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}