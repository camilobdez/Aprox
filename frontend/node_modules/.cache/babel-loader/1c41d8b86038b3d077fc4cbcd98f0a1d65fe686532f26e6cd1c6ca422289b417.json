{"ast":null,"code":"'use strict';\n\nvar Parser = require('mr-parser').Parser;\nvar Interpreter = require('./Interpreter');\nvar extend = require('extend');\nfunction CodeGenerator(options, defs) {\n  this.statements = [];\n  this.defs = defs || {};\n  this.interpreter = new Interpreter(this, options);\n}\nCodeGenerator.prototype.setDefs = function (defs) {\n  this.defs = extend(this.defs, defs);\n  return this;\n};\nCodeGenerator.prototype.compile = function (namespace) {\n  var self = this;\n  if (!namespace || !(typeof namespace === 'object' || typeof namespace === 'function')) {\n    throw TypeError('namespace must be an object');\n  }\n  if (typeof namespace.factory !== 'function') {\n    throw TypeError('namespace.factory must be a function');\n  }\n\n  // definitions available in the function\n  // each property under this.defs is mapped to local variables\n  // e.g\n  //\n  //  function (defs) {\n  //    var ns = defs['ns']\n  //    // code generated for the expression\n  //  }\n  this.defs.ns = namespace;\n  this.defs.$$mathCodegen = {\n    getProperty: function (symbol, scope, ns) {\n      function applyFactoryIfNeeded(value) {\n        if (self.interpreter.options.applyFactoryToScope && typeof value !== 'function') {\n          return ns.factory(value);\n        }\n        return value;\n      }\n      if (symbol in scope) {\n        return applyFactoryIfNeeded(scope[symbol]);\n      }\n      if (symbol in ns) {\n        return applyFactoryIfNeeded(ns[symbol]);\n      }\n      throw SyntaxError('symbol \"' + symbol + '\" is undefined');\n    },\n    functionProxy: function (fn, name) {\n      if (typeof fn !== 'function') {\n        throw SyntaxError('symbol \"' + name + '\" must be a function');\n      }\n      return fn;\n    }\n  };\n  this.defs.$$processScope = this.defs.$$processScope || function () {};\n  var defsCode = Object.keys(this.defs).map(function (name) {\n    return 'var ' + name + ' = defs[\"' + name + '\"]';\n  });\n\n  // statement join\n  if (!this.statements.length) {\n    throw Error('there are no statements saved in this generator, make sure you parse an expression before compiling it');\n  }\n\n  // last statement is always a return statement\n  this.statements[this.statements.length - 1] = 'return ' + this.statements[this.statements.length - 1];\n  var code = this.statements.join(';');\n  var factoryCode = defsCode.join('\\n') + '\\n' + ['return {', '  eval: function (scope) {', '    scope = scope || {}', '    $$processScope(scope)', '    ' + code, '  },', \"  code: '\" + code + \"'\", '}'].join('\\n');\n\n  /* eslint-disable */\n  var factory = new Function('defs', factoryCode);\n  return factory(this.defs);\n  /* eslint-enable */\n};\n\nCodeGenerator.prototype.parse = function (code) {\n  var self = this;\n  var program = new Parser().parse(code);\n  this.statements = program.blocks.map(function (statement) {\n    return self.interpreter.next(statement);\n  });\n  return this;\n};\nmodule.exports = CodeGenerator;","map":{"version":3,"names":["Parser","require","Interpreter","extend","CodeGenerator","options","defs","statements","interpreter","prototype","setDefs","compile","namespace","self","TypeError","factory","ns","$$mathCodegen","getProperty","symbol","scope","applyFactoryIfNeeded","value","applyFactoryToScope","SyntaxError","functionProxy","fn","name","$$processScope","defsCode","Object","keys","map","length","Error","code","join","factoryCode","Function","parse","program","blocks","statement","next","module","exports"],"sources":["C:/Users/camilo/Desktop/aprox/node_modules/interval-arithmetic-eval/node_modules/math-codegen/lib/CodeGenerator.js"],"sourcesContent":["'use strict'\n\nvar Parser = require('mr-parser').Parser\nvar Interpreter = require('./Interpreter')\nvar extend = require('extend')\n\nfunction CodeGenerator (options, defs) {\n  this.statements = []\n  this.defs = defs || {}\n  this.interpreter = new Interpreter(this, options)\n}\n\nCodeGenerator.prototype.setDefs = function (defs) {\n  this.defs = extend(this.defs, defs)\n  return this\n}\n\nCodeGenerator.prototype.compile = function (namespace) {\n  var self = this\n  if (!namespace || !(typeof namespace === 'object' || typeof namespace === 'function')) {\n    throw TypeError('namespace must be an object')\n  }\n  if (typeof namespace.factory !== 'function') {\n    throw TypeError('namespace.factory must be a function')\n  }\n\n  // definitions available in the function\n  // each property under this.defs is mapped to local variables\n  // e.g\n  //\n  //  function (defs) {\n  //    var ns = defs['ns']\n  //    // code generated for the expression\n  //  }\n  this.defs.ns = namespace\n  this.defs.$$mathCodegen = {\n    getProperty: function (symbol, scope, ns) {\n      function applyFactoryIfNeeded (value) {\n        if (self.interpreter.options.applyFactoryToScope && typeof value !== 'function') {\n          return ns.factory(value)\n        }\n        return value\n      }\n\n      if (symbol in scope) {\n        return applyFactoryIfNeeded(scope[symbol])\n      }\n      if (symbol in ns) {\n        return applyFactoryIfNeeded(ns[symbol])\n      }\n      throw SyntaxError('symbol \"' + symbol + '\" is undefined')\n    },\n    functionProxy: function (fn, name) {\n      if (typeof fn !== 'function') {\n        throw SyntaxError('symbol \"' + name + '\" must be a function')\n      }\n      return fn\n    }\n  }\n  this.defs.$$processScope = this.defs.$$processScope || function () {}\n\n  var defsCode = Object.keys(this.defs).map(function (name) {\n    return 'var ' + name + ' = defs[\"' + name + '\"]'\n  })\n\n  // statement join\n  if (!this.statements.length) {\n    throw Error('there are no statements saved in this generator, make sure you parse an expression before compiling it')\n  }\n\n  // last statement is always a return statement\n  this.statements[this.statements.length - 1] = 'return ' + this.statements[this.statements.length - 1]\n\n  var code = this.statements.join(';')\n  var factoryCode = defsCode.join('\\n') + '\\n' + [\n    'return {',\n    '  eval: function (scope) {',\n    '    scope = scope || {}',\n    '    $$processScope(scope)',\n    '    ' + code,\n    '  },',\n    \"  code: '\" + code + \"'\",\n    '}'\n  ].join('\\n')\n\n  /* eslint-disable */\n  var factory = new Function('defs', factoryCode)\n  return factory(this.defs)\n  /* eslint-enable */\n}\n\nCodeGenerator.prototype.parse = function (code) {\n  var self = this\n  var program = new Parser().parse(code)\n  this.statements = program.blocks.map(function (statement) {\n    return self.interpreter.next(statement)\n  })\n  return this\n}\n\nmodule.exports = CodeGenerator\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}