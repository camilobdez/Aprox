{"ast":null,"code":"import * as utils from './operations/utils';\nimport round from './round';\n/**\n * Constructor for closed intervals representing all the values inside (and\n * including) `lo` and `hi` e.g. `[lo, hi]`\n *\n * NOTE: If `lo > hi` then the constructor will return an empty interval\n *\n * @mixes arithmetic\n * @mixes algebra\n * @mixes misc\n * @mixes relational\n * @mixes trigonometric\n * @mixes utils\n * @mixes constants\n *\n * @link #bounded\n * @link #boundedSingleton\n *\n * @example\n * ```typescript\n * new Interval(1, 2)  // {lo: 1, hi: 2}\n * // function invocation without new is also supported\n * Interval(1, 2)   // {lo: 1, hi: 2}\n * // with numbers\n * Interval(1, 2)   // {lo: 1, hi: 2}\n * Interval(1)      // {lo: 1, hi: 1}\n * // with an array\n * Interval([1, 2]) // {lo: 1, hi: 2}\n * // singleton intervals\n * var x = Interval(1)\n * var y = Interval(2)\n * Interval(x, y)   // {lo: 1, hi: 2}\n * // when `lo > hi` it returns an empty interval\n * Interval(2, 1)   // {lo: Infinity, hi: -Infinity}\n * // bounded interval\n * Interval().bounded(1, 2)  // { lo: 0.9999999999999999, hi: 2.0000000000000004 }\n * // singleton bounded interval\n * Interval().boundedSingleton(2)  // {lo: 1.9999999999999998, hi: 2.0000000000000004}\n * // half open and open intervals\n * // [2, 3]\n * Interval(2, 3)                     // {lo: 2, hi: 3}\n * // (2, 3]\n * Interval().halfOpenLeft(2, 3)      // {lo: 2.0000000000000004, hi: 3}\n * // [2, 3)\n * Interval().halfOpenRight(2, 3)     // {lo: 2, hi: 2.9999999999999996}\n * // (2, 3)\n * Interval().open(2, 3)              // {lo: 2.0000000000000004, hi: 2.9999999999999996}\n * ```\n *\n * @param {number|array|Interval} lo The left endpoint of the interval if it's a\n * number or a singleton interval, if it's an array then an interval will be\n * built out of the elements of the array\n * @param {number|Interval} [hi] The right endpoint of the interval if it's a\n * number or a singleton interval, if omitted then a singleton interval will be\n * built out of `lo`\n */\nexport class _Interval {\n  constructor(lo, hi) {\n    /**\n     * The left endpoint of the interval\n     * @type {number}\n     */\n    this.lo = 0;\n    /**\n     * The right endpoint of the interval\n     * @type {number}\n     */\n    this.hi = 0;\n    if (!(this instanceof _Interval)) {\n      console.log('calling with new');\n      console.log(lo, hi);\n      return new _Interval(lo, hi);\n    }\n    if (typeof lo !== 'undefined' && typeof hi !== 'undefined') {\n      // possible cases:\n      // - Interval(1, 2)\n      // - Interval(Interval(1, 1), Interval(2, 2))     // singletons are required\n      if (utils.isInterval(lo)) {\n        if (!utils.isSingleton(lo)) {\n          throw new TypeError('Interval: interval `lo` must be a singleton');\n        }\n        lo = lo.lo;\n      }\n      if (utils.isInterval(hi)) {\n        if (!utils.isSingleton(hi)) {\n          throw TypeError('Interval: interval `hi` must be a singleton');\n        }\n        hi = hi.hi;\n      }\n    } else if (typeof lo !== 'undefined') {\n      // possible cases:\n      // - Interval([1, 2])\n      // - Interval([Interval(1, 1), Interval(2, 2)])\n      if (Array.isArray(lo)) {\n        return new Interval(lo[0], lo[1]);\n      }\n      // - Interval(1)\n      return new Interval(lo, lo);\n    } else {\n      // possible cases:\n      // - Interval()\n      lo = hi = 0;\n    }\n    this.assign(lo, hi);\n  }\n  /**\n   * Sets `this.lo` and `this.hi` to a single value `v`\n   *\n   * @param {number} v\n   * @return {Interval} The calling interval i.e. `this`\n   */\n  singleton(v) {\n    return this.set(v, v);\n  }\n  /**\n   * Sets new endpoints to this interval, the left endpoint is equal to the\n   * previous IEEE floating point value of `lo` and the right endpoint\n   * is equal to the next IEEE floating point\n   * value of `hi`, it's assumed that `lo <= hi`\n   *\n   * @example\n   * ```typescript\n   * const x = Interval().bounded(1, 2)\n   * x.lo < 1 // true, x.lo === 0.9999999999999999\n   * x.hi > 2 // true, x.hi === 2.0000000000000004\n   * ```\n   *\n   * @example\n   * ```typescript\n   * // the correct representation of 1/3\n   * var x = Interval().bounded(1/3, 1/3)\n   * x.lo < 1/3 // true\n   * x.hi > 1/3 // true\n   * // however the floating point representation of 1/3 is less than the real 1/3\n   * // therefore the left endpoint could be 1/3 instead of the previous value of\n   * var next = Interval.round.safeNext\n   * var x = Interval().set(1/3, next(1/3))\n   * // x now represents 1/3 correctly\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval i.e. `this`\n   */\n  bounded(lo, hi) {\n    return this.set(round.prev(lo), round.next(hi));\n  }\n  /**\n   * Equivalent to `Interval().bounded(v, v)`\n   * @param {number} v\n   * @return {Interval} The calling interval i.e. `this`\n   */\n  boundedSingleton(v) {\n    return this.bounded(v, v);\n  }\n  /**\n   * Sets new endpoints for this interval, this method bypasses any\n   * checks on the type of arguments\n   *\n   * @param {Number} lo The left endpoint of the interval\n   * @param {Number} hi The right endpoint of the interval\n   * @return {Interval} The calling interval\n   */\n  set(lo, hi) {\n    this.lo = lo;\n    this.hi = hi;\n    return this;\n  }\n  /**\n   * Sets new endpoints for this interval checking that both arguments exist\n   * and that are valid numbers, additionally if `lo > hi` the interval is set to\n   * an empty interval\n   *\n   * @param {Number} lo The left endpoint of the interval\n   * @param {Number} hi The right endpoint of the interval\n   * @return {Interval} The calling interval\n   */\n  assign(lo, hi) {\n    if (typeof lo !== 'number' || typeof hi !== 'number') {\n      throw TypeError('Interval#assign: arguments must be numbers');\n    }\n    if (isNaN(lo) || isNaN(hi) || lo > hi) {\n      return this.setEmpty();\n    }\n    return this.set(lo, hi);\n  }\n  /**\n   * Sets the endpoints of this interval to `[∞, -∞]` effectively representing\n   * no values\n   * @return {Interval} The calling interval\n   */\n  setEmpty() {\n    return this.set(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\n  }\n  /**\n   * Sets the endpoints of this interval to `[-∞, ∞]` effectively representing all\n   * the possible real values\n   * @return {Interval} The calling interval\n   */\n  setWhole() {\n    return this.set(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n  }\n  /**\n   * Sets the endpoints of this interval to the open interval `(lo, hi)`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // (2, 3)\n   * Interval().open(2, 3)  // {lo: 2.0000000000000004, hi: 2.9999999999999996}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n  open(lo, hi) {\n    return this.assign(round.safeNext(lo), round.safePrev(hi));\n  }\n  /**\n   * Sets the endpoints of this interval to the half open interval `(lo, hi]`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // (2, 3]\n   * Interval().halfOpenLeft(2, 3)  // {lo: 2.0000000000000004, hi: 3}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n  halfOpenLeft(lo, hi) {\n    return this.assign(round.safeNext(lo), hi);\n  }\n  /**\n   * Sets the endpoints of this interval to the half open interval `[lo, hi)`\n   *\n   * NOTE: `Interval.round.disable` has no effect on this method\n   *\n   * @example\n   * ```typescript\n   * // [2, 3)\n   * Interval.halfOpenRight(2, 3)     // {lo: 2, hi: 2.9999999999999996}\n   * ```\n   *\n   * @param {number} lo\n   * @param {number} hi\n   * @return {Interval} The calling interval\n   */\n  halfOpenRight(lo, hi) {\n    return this.assign(lo, round.safePrev(hi));\n  }\n  /**\n   * Array representation of this interval\n   * @return {array}\n   */\n  toArray() {\n    return [this.lo, this.hi];\n  }\n  /**\n   * Creates an interval equal to the calling one\n   * @see Interval.clone\n   * @name Interval.prototype\n   * @example\n   * ```typescript\n   * var x = Interval(2, 3)\n   * x.clone()    // Interval(2, 3)\n   * ```\n   * @return {Interval}\n   */\n  clone() {\n    return new Interval().set(this.lo, this.hi);\n  }\n}\n// @ts-ignore\nfunction bindNew(Class) {\n  function _Class() {\n    for (var len = arguments.length, rest = Array(len), key = 0; key < len; key++) {\n      rest[key] = arguments[key];\n    }\n    // @ts-ignore\n    return new (Function.prototype.bind.apply(Class, [null].concat(rest)))();\n  }\n  _Class.prototype = Class.prototype;\n  return _Class;\n}\nconst Interval = bindNew(_Interval);\n// @ts-ignore\nInterval.factory = Interval;\nexport { Interval };","map":{"version":3,"names":["utils","round","_Interval","constructor","lo","hi","console","log","isInterval","isSingleton","TypeError","Array","isArray","Interval","assign","singleton","v","set","bounded","prev","next","boundedSingleton","isNaN","setEmpty","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setWhole","open","safeNext","safePrev","halfOpenLeft","halfOpenRight","toArray","clone","bindNew","Class","_Class","len","arguments","length","rest","key","Function","prototype","bind","apply","concat","factory"],"sources":["../src/interval.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}