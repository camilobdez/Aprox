{"ast":null,"code":"// token types\nvar tokenType = require('./token-type');\nvar ESCAPES = {\n  'n': '\\n',\n  'f': '\\f',\n  'r': '\\r',\n  't': '\\t',\n  'v': '\\v',\n  '\\'': '\\'',\n  '\"': '\"'\n};\nvar DELIMITERS = {\n  ',': true,\n  '(': true,\n  ')': true,\n  '[': true,\n  ']': true,\n  ';': true,\n  // unary\n  '~': true,\n  // factorial\n  '!': true,\n  // arithmetic operators\n  '+': true,\n  '-': true,\n  '*': true,\n  '/': true,\n  '%': true,\n  '^': true,\n  '**': true,\n  // python power like\n\n  // misc operators\n  '|': true,\n  // bitwise or\n  '&': true,\n  // bitwise and\n  '^|': true,\n  // bitwise xor\n  '=': true,\n  ':': true,\n  '?': true,\n  '||': true,\n  // logical or\n  '&&': true,\n  // logical and\n  'xor': true,\n  // logical xor\n\n  // relational\n  '==': true,\n  '!=': true,\n  '===': true,\n  '!==': true,\n  '<': true,\n  '>': true,\n  '>=': true,\n  '<=': true,\n  // shifts\n  '>>>': true,\n  '<<': true,\n  '>>': true\n};\n\n// helpers\n\nfunction isDigit(c) {\n  return c >= '0' && c <= '9';\n}\nfunction isIdentifier(c) {\n  return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '$' || c === '_';\n}\nfunction isWhitespace(c) {\n  return c === ' ' || c === '\\r' || c === '\\t' || c === '\\n' || c === '\\v' || c === '\\u00A0';\n}\nfunction isDelimiter(str) {\n  return DELIMITERS[str];\n}\nfunction isQuote(c) {\n  return c === '\\'' || c === '\"';\n}\n\n// lexer\n\nfunction Lexer() {}\nLexer.prototype.throwError = function (message, index) {\n  index = typeof index === 'undefined' ? this.index : index;\n  var error = new Error(message + ' at index ' + index);\n  error.index = index;\n  error.description = message;\n  throw error;\n};\nLexer.prototype.lex = function (text) {\n  this.text = text;\n  this.index = 0;\n  this.tokens = [];\n  while (this.index < this.text.length) {\n    // skip whitespaces\n    while (isWhitespace(this.peek())) {\n      this.consume();\n    }\n    var c = this.peek();\n    var c2 = c + this.peek(1);\n    var c3 = c2 + this.peek(2);\n\n    // order\n    // - delimiter of 3 characters\n    // - delimiter of 2 characters\n    // - delimiter of 1 character\n    // - number\n    // - variables, functions and named operators\n    if (isDelimiter(c3)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c3\n      });\n      this.consume();\n      this.consume();\n      this.consume();\n    } else if (isDelimiter(c2)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c2\n      });\n      this.consume();\n      this.consume();\n    } else if (isDelimiter(c)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c\n      });\n      this.consume();\n    } else if (isDigit(c) || c === '.' && isDigit(this.peek(1))) {\n      this.tokens.push({\n        type: tokenType.NUMBER,\n        value: this.readNumber()\n      });\n    } else if (isQuote(c)) {\n      this.tokens.push({\n        type: tokenType.STRING,\n        value: this.readString()\n      });\n    } else if (isIdentifier(c)) {\n      this.tokens.push({\n        type: tokenType.SYMBOL,\n        value: this.readIdentifier()\n      });\n    } else {\n      this.throwError('unexpected character ' + c);\n    }\n  }\n\n  // end token\n  this.tokens.push({\n    type: tokenType.EOF\n  });\n  return this.tokens;\n};\nLexer.prototype.peek = function (nth) {\n  nth = nth || 0;\n  if (this.index + nth >= this.text.length) {\n    return;\n  }\n  return this.text.charAt(this.index + nth);\n};\nLexer.prototype.consume = function () {\n  var current = this.peek();\n  this.index += 1;\n  return current;\n};\nLexer.prototype.readNumber = function () {\n  var number = '';\n  if (this.peek() === '.') {\n    number += this.consume();\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected');\n    }\n  } else {\n    while (isDigit(this.peek())) {\n      number += this.consume();\n    }\n    if (this.peek() === '.') {\n      number += this.consume();\n    }\n  }\n\n  // numbers after the decimal dot\n  while (isDigit(this.peek())) {\n    number += this.consume();\n  }\n\n  // exponent if available\n  if (this.peek() === 'e' || this.peek() === 'E') {\n    number += this.consume();\n    if (!(isDigit(this.peek()) || this.peek() === '+' || this.peek() === '-')) {\n      this.throwError();\n    }\n    if (this.peek() === '+' || this.peek() === '-') {\n      number += this.consume();\n    }\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected');\n    }\n    while (isDigit(this.peek())) {\n      number += this.consume();\n    }\n  }\n  return number;\n};\nLexer.prototype.readIdentifier = function () {\n  var text = '';\n  while (isIdentifier(this.peek()) || isDigit(this.peek())) {\n    text += this.consume();\n  }\n  return text;\n};\nLexer.prototype.readString = function () {\n  var quote = this.consume();\n  var string = '';\n  var escape;\n  while (true) {\n    var c = this.consume();\n    if (!c) {\n      this.throwError('string is not closed');\n    }\n    if (escape) {\n      if (c === 'u') {\n        var hex = this.text.substring(this.index + 1, this.index + 5);\n        if (!hex.match(/[\\da-f]{4}/i)) {\n          this.throwError('invalid unicode escape');\n        }\n        this.index += 4;\n        string += String.fromCharCode(parseInt(hex, 16));\n      } else {\n        var replacement = ESCAPES[c];\n        if (replacement) {\n          string += replacement;\n        } else {\n          string += c;\n        }\n      }\n      escape = false;\n    } else if (c === quote) {\n      break;\n    } else if (c === '\\\\') {\n      escape = true;\n    } else {\n      string += c;\n    }\n  }\n  return string;\n};\nmodule.exports = Lexer;","map":{"version":3,"names":["tokenType","require","ESCAPES","DELIMITERS","isDigit","c","isIdentifier","isWhitespace","isDelimiter","str","isQuote","Lexer","prototype","throwError","message","index","error","Error","description","lex","text","tokens","length","peek","consume","c2","c3","push","type","DELIMITER","value","NUMBER","readNumber","STRING","readString","SYMBOL","readIdentifier","EOF","nth","charAt","current","number","quote","string","escape","hex","substring","match","String","fromCharCode","parseInt","replacement","module","exports"],"sources":["C:/Users/camilo/Desktop/aprox/node_modules/mr-parser/lib/Lexer.js"],"sourcesContent":["// token types\nvar tokenType = require('./token-type')\n\nvar ESCAPES = {\n  'n': '\\n',\n  'f': '\\f',\n  'r': '\\r',\n  't': '\\t',\n  'v': '\\v',\n  '\\'': '\\'',\n  '\"': '\"'\n}\n\nvar DELIMITERS = {\n  ',': true,\n  '(': true,\n  ')': true,\n  '[': true,\n  ']': true,\n  ';': true,\n\n  // unary\n  '~': true,\n\n  // factorial\n  '!': true,\n\n  // arithmetic operators\n  '+': true,\n  '-': true,\n  '*': true,\n  '/': true,\n  '%': true,\n  '^': true,\n  '**': true,     // python power like\n\n  // misc operators\n  '|': true,      // bitwise or\n  '&': true,      // bitwise and\n  '^|': true,     // bitwise xor\n  '=': true,\n  ':': true,\n  '?': true,\n\n  '||': true,      // logical or\n  '&&': true,      // logical and\n  'xor': true,     // logical xor\n\n  // relational\n  '==': true,\n  '!=': true,\n  '===': true,\n  '!==': true,\n  '<': true,\n  '>': true,\n  '>=': true,\n  '<=': true,\n\n  // shifts\n  '>>>': true,\n  '<<': true,\n  '>>': true\n}\n\n// helpers\n\nfunction isDigit (c) {\n  return c >= '0' && c <= '9'\n}\n\nfunction isIdentifier (c) {\n  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||\n    c === '$' || c === '_'\n}\n\nfunction isWhitespace (c) {\n  return c === ' ' || c === '\\r' || c === '\\t' ||\n    c === '\\n' || c === '\\v' || c === '\\u00A0'\n}\n\nfunction isDelimiter (str) {\n  return DELIMITERS[str]\n}\n\nfunction isQuote (c) {\n  return c === '\\'' || c === '\"'\n}\n\n// lexer\n\nfunction Lexer () {}\n\nLexer.prototype.throwError = function (message, index) {\n  index = typeof index === 'undefined' ? this.index : index\n\n  var error = new Error(message + ' at index ' + index)\n  error.index = index\n  error.description = message\n  throw error\n}\n\nLexer.prototype.lex = function (text) {\n  this.text = text\n  this.index = 0\n  this.tokens = []\n\n  while (this.index < this.text.length) {\n    // skip whitespaces\n    while (isWhitespace(this.peek())) {\n      this.consume()\n    }\n    var c = this.peek()\n    var c2 = c + this.peek(1)\n    var c3 = c2 + this.peek(2)\n\n    // order\n    // - delimiter of 3 characters\n    // - delimiter of 2 characters\n    // - delimiter of 1 character\n    // - number\n    // - variables, functions and named operators\n    if (isDelimiter(c3)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c3\n      })\n      this.consume()\n      this.consume()\n      this.consume()\n    } else if (isDelimiter(c2)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c2\n      })\n      this.consume()\n      this.consume()\n    } else if (isDelimiter(c)) {\n      this.tokens.push({\n        type: tokenType.DELIMITER,\n        value: c\n      })\n      this.consume()\n    } else if (isDigit(c) ||\n        (c === '.' && isDigit(this.peek(1)))) {\n      this.tokens.push({\n        type: tokenType.NUMBER,\n        value: this.readNumber()\n      })\n    } else if (isQuote(c)) {\n      this.tokens.push({\n        type: tokenType.STRING,\n        value: this.readString()\n      })\n    } else if (isIdentifier(c)) {\n      this.tokens.push({\n        type: tokenType.SYMBOL,\n        value: this.readIdentifier()\n      })\n    } else {\n      this.throwError('unexpected character ' + c)\n    }\n  }\n\n  // end token\n  this.tokens.push({ type: tokenType.EOF })\n\n  return this.tokens\n}\n\nLexer.prototype.peek = function (nth) {\n  nth = nth || 0\n  if (this.index + nth >= this.text.length) {\n    return\n  }\n  return this.text.charAt(this.index + nth)\n}\n\nLexer.prototype.consume = function () {\n  var current = this.peek()\n  this.index += 1\n  return current\n}\n\nLexer.prototype.readNumber = function () {\n  var number = ''\n\n  if (this.peek() === '.') {\n    number += this.consume()\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected')\n    }\n  } else {\n    while (isDigit(this.peek())) {\n      number += this.consume()\n    }\n    if (this.peek() === '.') {\n      number += this.consume()\n    }\n  }\n\n  // numbers after the decimal dot\n  while (isDigit(this.peek())) {\n    number += this.consume()\n  }\n\n  // exponent if available\n  if ((this.peek() === 'e' || this.peek() === 'E')) {\n    number += this.consume()\n\n    if (!(isDigit(this.peek()) ||\n        this.peek() === '+' ||\n        this.peek() === '-')) {\n      this.throwError()\n    }\n\n    if (this.peek() === '+' || this.peek() === '-') {\n      number += this.consume()\n    }\n\n    if (!isDigit(this.peek())) {\n      this.throwError('number expected')\n    }\n\n    while (isDigit(this.peek())) {\n      number += this.consume()\n    }\n  }\n  return number\n}\n\nLexer.prototype.readIdentifier = function () {\n  var text = ''\n  while (isIdentifier(this.peek()) || isDigit(this.peek())) {\n    text += this.consume()\n  }\n  return text\n}\n\nLexer.prototype.readString = function () {\n  var quote = this.consume()\n  var string = ''\n  var escape\n  while (true) {\n    var c = this.consume()\n    if (!c) {\n      this.throwError('string is not closed')\n    }\n    if (escape) {\n      if (c === 'u') {\n        var hex = this.text.substring(this.index + 1, this.index + 5)\n        if (!hex.match(/[\\da-f]{4}/i)) {\n          this.throwError('invalid unicode escape')\n        }\n        this.index += 4\n        string += String.fromCharCode(parseInt(hex, 16))\n      } else {\n        var replacement = ESCAPES[c]\n        if (replacement) {\n          string += replacement\n        } else {\n          string += c\n        }\n      }\n      escape = false\n    } else if (c === quote) {\n      break\n    } else if (c === '\\\\') {\n      escape = true\n    } else {\n      string += c\n    }\n  }\n  return string\n}\n\nmodule.exports = Lexer\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}