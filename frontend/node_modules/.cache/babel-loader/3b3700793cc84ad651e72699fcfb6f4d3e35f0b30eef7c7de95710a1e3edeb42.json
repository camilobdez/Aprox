{"ast":null,"code":"/**\n * @mixin utils\n */\n/**\n * Checks if `x` is an interval, `x` is an interval if it's an object which has\n * `x.lo` and `x.hi` defined and both are numbers\n *\n * @example\n * ```typescript\n * Interval.isInterval(\n *   Interval()\n * ) // true\n * Interval.isInterval(\n *   undefined\n * ) // false\n * Interval.isInterval(\n *   {lo: 1, hi: 2}\n * ) // true\n * ```\n *\n * @param  {*} x\n * @return {boolean} true if `x` is an interval\n */\nexport function isInterval(x) {\n  return typeof x === 'object' && typeof x.lo === 'number' && typeof x.hi === 'number';\n}\n/**\n * Checks if `x` is empty, it's empty when `x.lo > x.hi`\n *\n * @example\n * ```typescript\n * Interval.isEmpty(\n *   Interval.EMPTY\n * ) // true\n * Interval.isEmpty(\n *   Interval.WHOLE\n * ) // false\n * Interval.isEmpty(\n *   // bypass empty interval check\n *   Interval().set(1, -1)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function isEmpty(i) {\n  return i.lo > i.hi;\n}\n/**\n * Checks if an interval is a whole interval, that is an interval which covers\n * all the real numbers i.e. when `x.lo === -Infinity` and `x.hi === Infinity`\n *\n * @example\n * ```typescript\n * Interval.isWhole(\n *   Interval.WHOLE\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function isWhole(i) {\n  return i.lo === -Infinity && i.hi === Infinity;\n}\n/**\n * Checks if the intervals `x` is a singleton (an interval representing a single\n * value) i.e. when `x.lo === x.hi`\n *\n * @example\n * ```typescript\n * Interval.isSingleton(\n *  Interval(2, 2)\n * ) // true\n * Interval.isSingleton(\n *  Interval(2)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function isSingleton(i) {\n  return i.lo === i.hi;\n}\n/**\n * Checks if zero is included in the interval `x`\n *\n * @example\n * ```typescript\n * Interval.zeroIn(\n *   Interval(-1, 1)\n * ) // true\n * ```\n *\n * @param {Interval} i\n * @returns {boolean}\n */\nexport function zeroIn(i) {\n  return hasValue(i, 0);\n}\n/**\n * Checks if `value` is included in the interval `x`\n *\n * @example\n * ```typescript\n * Interval.hasValue(\n *   Interval(-1, 1),\n *   0\n * ) // true\n * Interval.hasValue(\n *   Interval(-1, 1),\n *   10\n * ) // false\n * ```\n *\n * @param {Interval} i\n * @param {number} value\n * @returns {boolean}\n */\nexport function hasValue(i, value) {\n  if (isEmpty(i)) {\n    return false;\n  }\n  return i.lo <= value && value <= i.hi;\n}\n/**\n * Checks if `x` is a subset of `y`\n *\n * @example\n * ```typescript\n * Interval.hasInteravl(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * ) // true\n * Interval.hasInteravl(\n *   Interval(0, 3),\n *   Interval(1, 4)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\nexport function hasInterval(x, y) {\n  if (isEmpty(x)) {\n    return true;\n  }\n  return !isEmpty(y) && y.lo <= x.lo && x.hi <= y.hi;\n}\n/**\n * Checks if the intervals `x`, `y` overlap i.e. if they share at least one value\n *\n * @example\n * ```typescript\n * Interval.intervalsOverlap(\n *   Interval(0, 3),\n *   Interval(1, 2)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 2),\n *   Interval(1, 3)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 2),\n *   Interval(2, 3)\n * ) // true\n * Interval.intervalsOverlap(\n *   Interval(0, 1),\n *   Interval(2, 3)\n * ) // false\n * ```\n *\n * @param {Interval} x\n * @param {Interval} y\n * @returns {boolean}\n */\nexport function intervalsOverlap(x, y) {\n  if (isEmpty(x) || isEmpty(y)) {\n    return false;\n  }\n  return x.lo <= y.lo && y.lo <= x.hi || y.lo <= x.lo && x.lo <= y.hi;\n}","map":{"version":3,"names":["isInterval","x","lo","hi","isEmpty","i","isWhole","Infinity","isSingleton","zeroIn","hasValue","value","hasInterval","y","intervalsOverlap"],"sources":["../../src/operations/utils.ts"],"sourcesContent":[null],"mappings":"AAEA;;;AAIA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUA,UAAUA,CAACC,CAAM;EAC/B,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAI,OAAOA,CAAC,CAACC,EAAE,KAAK,QAAQ,IAAI,OAAOD,CAAC,CAACE,EAAE,KAAK,QAAQ;AACtF;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUC,OAAOA,CAACC,CAAW;EACjC,OAAOA,CAAC,CAACH,EAAE,GAAGG,CAAC,CAACF,EAAE;AACpB;AAEA;;;;;;;;;;;;;;AAcA,OAAM,SAAUG,OAAOA,CAACD,CAAW;EACjC,OAAOA,CAAC,CAACH,EAAE,KAAK,CAACK,QAAQ,IAAIF,CAAC,CAACF,EAAE,KAAKI,QAAQ;AAChD;AAEA;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,WAAWA,CAACH,CAAW;EACrC,OAAOA,CAAC,CAACH,EAAE,KAAKG,CAAC,CAACF,EAAE;AACtB;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAUM,MAAMA,CAACJ,CAAW;EAChC,OAAOK,QAAQ,CAACL,CAAC,EAAE,CAAC,CAAC;AACvB;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUK,QAAQA,CAACL,CAAW,EAAEM,KAAa;EACjD,IAAIP,OAAO,CAACC,CAAC,CAAC,EAAE;IACd,OAAO,KAAK;;EAEd,OAAOA,CAAC,CAACH,EAAE,IAAIS,KAAK,IAAIA,KAAK,IAAIN,CAAC,CAACF,EAAE;AACvC;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUS,WAAWA,CAACX,CAAW,EAAEY,CAAW;EAClD,IAAIT,OAAO,CAACH,CAAC,CAAC,EAAE;IACd,OAAO,IAAI;;EAEb,OAAO,CAACG,OAAO,CAACS,CAAC,CAAC,IAAIA,CAAC,CAACX,EAAE,IAAID,CAAC,CAACC,EAAE,IAAID,CAAC,CAACE,EAAE,IAAIU,CAAC,CAACV,EAAE;AACpD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAM,SAAUW,gBAAgBA,CAACb,CAAW,EAAEY,CAAW;EACvD,IAAIT,OAAO,CAACH,CAAC,CAAC,IAAIG,OAAO,CAACS,CAAC,CAAC,EAAE;IAC5B,OAAO,KAAK;;EAEd,OAAQZ,CAAC,CAACC,EAAE,IAAIW,CAAC,CAACX,EAAE,IAAIW,CAAC,CAACX,EAAE,IAAID,CAAC,CAACE,EAAE,IAAMU,CAAC,CAACX,EAAE,IAAID,CAAC,CAACC,EAAE,IAAID,CAAC,CAACC,EAAE,IAAIW,CAAC,CAACV,EAAG;AACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}